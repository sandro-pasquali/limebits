/**
 * Copyright 2009 Lime Labs LLC
 * @author Sandro Pasquali (spasquali@gmail.com)
 *
 * This file is part of AXIS.
 *
 * AXIS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3 as published by the Free Software Foundation.
 *
 * AXIS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with AXIS.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * An improvement and extension of the ideas found here: http://books.couchdb.org/relax/
 *
 * The initialization file for the AXIS documentation system.  Please take not of the
 * option defaults, and the fact that the footer for every documentation page is
 * generated by this file -- this means HTML is created here.
 */

/**
 * Copyright 2009, Noah Slater <nslater@tumbolia.org>
 *
 * Copying and distribution of this file, with or without modification, are
 * permitted in any medium without royalty provided the copyright notice and this
 * notice are preserved.
 */
 
$AXIS.Modules.local.Docs.__init = function(opts)
  {    
    var b = opts || {};

    AXIS.onDOMReady.subscribe({
      callback: function(){
        b.rootPath        = opts.rootPath     || './';
        b.groupURI        = opts.groupURI     || false;
        b.commentText     = opts.commentText  || "Comment on this paragraph";
        b.headerText      = opts.headerText   || "TABLE OF CONTENTS";
        b.minSingleColumn = opts.minSingleColumn || 8;
        b.showNav         = (opts.showNav === undefined) ? true : opts.showNav;

        b.tooltips        = (opts.tooltips === undefined) 
                              ? {} 
                              : AXIS.isObject(opts.tooltips) 
                                  ? opts.tooltips 
                                  : false;
                            
        b.codestyling     = (opts.codestyling === undefined) 
                              ? {} 
                              : AXIS.isObject(opts.codestyling) 
                                  ? opts.codestyling 
                                  : false;
                              
        /**
         * Support abbreviated ABBR 
         */
        var abbr = {
          
          XML:      {
            text: 'EXtensible Markup Language',
            link: 'http://en.wikipedia.org/wiki/XML'
          },
          HTML:     {
            text: 'Hypertext Markup Language',
            link: 'http://en.wikipedia.org/wiki/HTML'
          },
          XHR:      {
            text: 'XML Http Request',
            link: 'http://en.wikipedia.org/wiki/XMLHTTP'  
          },
          HTTP:     {
            text: 'HyperText Transfer Protocol',
            link: 'http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol'
          },
          DOM:      {
            text: 'Document Object Model',
            link: 'http://en.wikipedia.org/wiki/Document_Object_Model'
          },
          UI:       {
            text: 'User Interface',
            link: 'http://en.wikipedia.org/wiki/User_interface'
          },
          RFC:      {
            text: 'Request For Comments',
            link: 'http://en.wikipedia.org/wiki/Request_for_Comments'
          },
          CSS:      {
            text: 'Cascading Style Sheets',
            link: 'http://en.wikipedia.org/wiki/CSS'  
          },
          WebDAV:   {
            text: 'Web Based Distributed Authoring and Versioning',
            link: 'http://en.wikipedia.org/wiki/Webdav'  
          },
          AJAX:     {
            text: 'Asynchronous Javascript And XML',
            link: 'http://en.wikipedia.org/wiki/Ajax_(programming)'
          },
          REST:     {
            text: 'REpresentational State Transfer',
            link: 'http://en.wikipedia.org/wiki/REST'
          },
          API:      {
            text: 'Application Programming Interface',
            link: 'http://en.wikipedia.org/wiki/API'
          },
          URL:      {
            text: 'Uniform Resource Locator',
            link: 'http://en.wikipedia.org/wiki/URL' 
          }
        }
        
        /**
         * These are the tooltip definitions bound to <dfn> elements.  We have
         * some predefined ones, but want to ensure that the user can always
         * override those, so we give precedence to any sent indices.
         */
        var dfnD = {  
          'String': {
            text: "A string of text.  Enclose in single(') or double(\") quotes when defining, ie:<br /><br />var myString = 'a line of text';"
          },
          'Mixed': {
            text: "Indicates that a parameter may accept multiple (though not necessarily all) types."
          },
          'Function': {
            text: "A named block of code that can be invoked elsewhere in your program:<br />function test(){<br />&nbsp;&nbsp;console.log('function called');<br />}<br /><br />test();<br />// function called"
          },
          'Number': {
            text: "An integer or a floating point number."
          },
          'Timestamp': {
            text: "An integer containing the number of milliseconds since the epoch (January 1, 1970)."
          },
          'Boolean': {
            text: "A true/false value."
          },
          'Callback': {
            text: "A callback is a Function usually passed to another object to be called at some later date.  A common example is to pass a callback to an AJAX method, the AJAX calling the callback Function when it has finished receiving data at some point in the future."
          },
          'Array': {
            text: "An Array is enclosed in square brackets [] and has any number of values separated by commas, such as: ['first element',2,3,4,'another element']"
          },
          'Object': {
            text: "An Object is enclosed in curly braces {} and has any number of attributes or methods, such as:<br /> {<br />&nbsp;&nbsp;word: 'Hello',<br />&nbsp;&nbsp;'some value': 23,<br />&nbsp;&nbsp;'functionName': function() { a=1; }<br />}<br />Be sure to follow each element with a comma."
          },
          'RegExp': {
            text: "A regular expression object."
          },
          'Element': {
            text: "A DOM element object."
          },
          'QueueObject': {
            text: "A QueueObject is passed to AXIS#Queue#add. The minimal definition is:<br />{<br />&nbsp;&nbsp;main: function() { // do something here }<br />}",
            link: "/AXISDocs/codebase/AXIS/Queue.html"
          },
          'DAVObject': {
            text: "All AXIS#WebDAV methods expect a single argument, a DAVObject.",
            link: "/AXISDocs/codebase/extensions/WebDAV.html"
          },
          'CustomEvent': {
            text: "A CustomEvent object is created using the AXIS#CustomEvent#create method.",
            link: "/AXISDocs/codebase/AXIS/CustomEvent.html"
          }
        }
                 
        /**
         * The title of the document will be set to the first <h1> tag
         * in the body, which is expected to be the page heading.
         */
        document.title = AXIS.getText(AXIS.select('h1').$[0])
            
        /**
         * The TOC bar is set here for all pages
         */
        var bb          = AXIS.find('TOC_BAR');
        
        var tocT        = AXIS.Element.create('div', {
          id:     'TOC_headline',
          html:   b.headerText,
          events: {
            'click':  function() {
              document.location.href = b.rootPath
            }
          }
        });

        bb.appendChild(tocT);
        
        /**
         * Add paragraph commenting ability if requested
         */
        if(b.groupURI) {
          
          b.groupURI += "?subject=" + escape("Comment on \"" + document.title + "\"");
          
          AXIS
            .select('p')
            .foreach(function(t) {     
              var ct = AXIS.getText(t);//.substring(0,1000);
              //ct += '...';
                       
              var body = "From " + top.location.href + "\n\n> " + ct;
              var current_uri = b.groupURI + "&body=" + escape(body);
              
              var comment_a = AXIS.Element.create('a', {
                href:     current_uri,
                'class':  "comment"  
              });
              
              comment_a.appendChild(document.createTextNode(b.commentText));
              // get current's parent
              var text = t.firstChild;
              t.insertBefore(comment_a, text);
            });
        }
           
        /**
         * IE doesn't support q:before { content: open-quote; (etc)
         */
        if(AXIS.isIE) {
          var q = document.getElementsByTagName('q');
          for(var i=0; i < q.length; i++) {
            q[i].innerHTML = '&#x201C;' + q[i].innerHTML + '&#x201D;';  
          }
        }
        
        /**
         * Init all preset <abbr> elements
         */
        AXIS
          .select('abbr')
          .foreach(function(a) {
            var t = AXIS.getText(a);

            if(abbr[t] && !a.getAttribute('title')) {
              
              a.setAttribute('title',abbr[t].text);
              
              if(abbr[t].link) {
    	          a.style.cursor = 'pointer';
      	        a.style.cursor = 'hand';
                AXIS.attachEvent('click', function() {
    	            document.location.href = abbr[t].link; 
    	          },a);
    	        }  
            }
          });

        /**
         * Create TOC. Autodiscovering all <h2> elements, which will form
         * the link list for this page. 
         */
        if(b.showNav) 
          {
  
            var navCol          = AXIS.Element.create('div', {
              'class': 'NAV_col' 
            });
            
            var navCol2         = AXIS.Element.create('div', {
              'class': 'NAV_col' 
            });
            
            var clr             = AXIS.Element.create('div', {
              style: {
                clear: 'both'  
              }  
            });
            
            var nav             = AXIS.Element.create('div', {
              append: [
                navCol,
                navCol2,
                clr    
              ]
            });
            
            var cnt = 0;
            var msc;
            AXIS
              .select('h2')
              .foreach(function(t) 
                {
                  /**
                   * Some basic formatting to keep two columns of subnav if 
                   * a large number of subnavs exist
                   */
                  msc = b.minSingleColumn;
                  msc = this.length > (msc *2) ? parseInt(this.length/2) : msc;  
                  var col = ((cnt > msc) && (this.length /2) < cnt) ? navCol2 : navCol;
                  
                  /**
                   * Get the element and its text.  Create an anchor -- anchor
                   * uses parsed version of element text, - special characters
                   * and spaces
                   */
                  var cont    = AXIS.getText(t);
                  var a       = AXIS.Element.create('a');
                  var pS      = cont.replace(/\'|\"|\s/g, "");
                  a.id        = pS + '_anch';
                  t.parentNode.insertBefore(a,t);
                  
                  /**
                   * Now build the navigation system.  Two columns, left being nav
                   * for this page, right being additional links nav
                   */
                  var dc          = AXIS.Element.create('div');
                  var ma          = AXIS.Element.create('a');
                  ma.href         = '#' + pS + '_anch';
                  ma.innerHTML    = cont;
                  dc.appendChild(ma);
                  
                  col.appendChild(dc);
                    
                  ++cnt;
                });
            
            /**
             * Attach h2 nav after header
             */
            var h   = AXIS.find('header');
            if(h) {
              h.parentNode.insertBefore(nav, h.nextSibling);
            }
          }
        
        /**
         * Attach footer
         */
        var ft        = AXIS.Element.create('div');
        ft.id         = "footer";
        ft.innerHTML  = '\
          <p class="copyright">\
            Copyright 2009,\
            <a href="http://www.limebits.com/">LimeBits</a>,\
            <span class="amp">&amp;</span>\
            <a href="http://www.limelabs.com/">LimeLabs</a>\
          </p>';
        
        document.body.appendChild(ft);

        /**
         * Turn on tooltip handling if requested 
         */

        if(b.tooltips) {

        /**
         * We're going to create tooltip definitions, by default, for the Docs module.
         * Make sure that .definitions is initialized, if necessary.
         */
        for(var z in b.tooltips.definitions) {
          dfnD[z] = b.tooltips.definitions[z]  
        }
        
        b.tooltips.definitions = b.tooltips.definitions || {};
          
          AXIS.Modules.load({
            provider: 'local',
            module:   'Tooltips',
            options:  {
                        definitions:  dfnD,
                        topOffset:    (b.tooltips.topOffset === undefined) 
                                            ? false 
                                            : b.tooltips.topOffset,
                        leftOffset:   (b.tooltips.leftOffset === undefined) 
                                            ? false 
                                            : b.tooltips.leftOffset,
                        maxWidth:     (b.tooltips.maxWidth === undefined) 
                                            ? false 
                                            : b.tooltips.maxWidth
                      },
            onload:   function(ob) {
              ob.set();
            }
          });  
        }
          
        /**
         * Code syntax highlighting for code chunks
         */
        if(b.codestyling) 
          {          
            AXIS.Modules.load({
              provider: 'local',
              module:   'SyntaxHighlighter',
              options:  b.codestyling,
              onload: function(r) 
                {
                  r.paint(b.codestyling.brushes);
                }
            }); 
          }
          
        return {};
      }
    });
    
    /**
     * Create and return Docs API
     */
  }
